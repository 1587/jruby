require 'erb'

SRC_DIR = "src"
MAX_ARITY = 10

TEMPLATES = %w[
  org/jruby/internal/runtime/methods/DynamicMethod
  org/jruby/internal/runtime/methods/DefaultMethod
  org/jruby/internal/runtime/methods/InterpretedMethod
  org/jruby/ast/ArgsNode
  org/jruby/runtime/DynamicScope
  org/jruby/runtime/Block
  org/jruby/runtime/BlockBody
  org/jruby/runtime/NullBlockBody
]

GENERATED_WARNING = "
////////////////////////////////////////////////////////////////////////////////
// NOTE: THIS FILE IS GENERATED! DO NOT EDIT THIS FILE!
// generated from: <%= file_src %>
// using arities: <%= arities_src %>
////////////////////////////////////////////////////////////////////////////////
"

def create_nargs_in(n)
  if n > 0
    ", " + create_nargs_in_bare(n)
  end
end

def create_nargs_in_bare(n)
  if n > 0
    str = ""
    n.times do |i|
      str << "IRubyObject arg#{i}"
      str << "," if i + 1 < n
    end
    str
  end
end

def create_nargs_out(n)
  if n > 0
    ", " + create_nargs_out_bare(n)
  end
end

def create_nargs_out_bare(n)
  if n > 0
    str = ""
    n.times do |i|
      str << "arg#{i}"
      str << "," if i + 1 < n
    end
    str
  end
end

def create_nargs_ary(n)
  ", " + create_nargs_ary_bare(n)
end

def create_nargs_ary_bare(n)
  if n == 0
    "IRubyObject.NULL_ARRAY"
  else
    str = "new IRubyObject[] {"
    n.times do |i|
      str << "arg#{i}"
      str << "," if i + 1 < n
    end
    str + "}"
  end
end

def generate(file_src, arities_src)
  file_template = ERB.new(File.read(file_src))
  arities_template = ERB.new(File.read(arities_src))
  arity_range = 0..MAX_ARITY
  generated_arities = ""

  for arity in arity_range do
    n_args_in = create_nargs_in(arity)
    n_args_in_bare = create_nargs_in_bare(arity)
    n_args_out = create_nargs_out(arity)
    n_args_out_bare = create_nargs_out_bare(arity)
    n_args_ary = create_nargs_ary(arity)
    n_args_ary_bare = create_nargs_ary_bare(arity)
    generated_arities << arities_template.result(binding)
  end

  generated_warning = ERB.new(GENERATED_WARNING).result(binding)

  file_template.result(binding)
end

def generate_all
  TEMPLATES.map do |name|
    name = "#{SRC_DIR}/" + name
    File.open(name +".java", 'w') do |f|
      f.write(generate(name + ".erb", name + ".arities.erb"))
    end
  end
end

if $0 == __FILE__
  generate_all
end