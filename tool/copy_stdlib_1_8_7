#!/usr/bin/env jruby

# This script is for use with JRuby, to copy the (patched) stdlib files from
# various locations in MRI's layout to JRuby's layout. It should be used
# against the jruby-specific fork of MRI's repository at
# github.com/jruby/ruby. This version is for the 1.8.7 stdlib, and should
# be used against the jruby-ruby_1_8_7 branch.
#
# usage: copy_stdlib <fork clone on jruby-ruby_1_8_7> <jruby dir>

require 'fileutils'

# stdlib notes:
# Win32API is a native ext in MRI but a .rb for us
# dl.rb is generated in MRI(???), static for us
# generator.rb is generator_internal.rb in builtin for us and mostly different from MRI
# rdoc/ri contains functionality for java classes and requires jar-file+cache support in jruby's site_lib
# tempfile is native on JRuby so there's no tempfile.rb
# timeout is native on JRuby so there's no timeout.rb
# weakref is native on JRuby so there's no weakref.rb
STDLIB_FILES = %w[
  Win32API.rb
  abbrev.rb
  benchmark.rb
  cgi.rb
  csv.rb
  debug.rb
  delegate.rb
  dl.rb
  drb
  erb.rb
  fileutils.rb
  forwardable.rb
  generator.rb
  getopts.rb
  ipaddr.rb
  irb.rb
  irb
  logger.rb
  matrix.rb
  mkmf.rb
  monitor.rb
  net
  open3.rb
  optparse.rb
  parsearg.rb
  pathname.rb
  rdoc
  resolv.rb
  rexml
  scanf.rb
  set.rb
  shell
  sync.rb
  thread.rb
  tmpdir.rb
  tracer.rb
  uri
  uri.rb
  webrick
  xmlrpc
]

EXT_FILES = {
  'ext/bigdecimal/lib/bigdecimal' => 'bigdecimal',
  'ext/dl/lib/dl' => 'dl',
  'ext/pty/lib/expect.rb' => 'expect.rb',
  'ext/io/wait/lib/nonblock.rb' => 'io/nonblock.rb',
  'ext/nkf/lib/kconv.rb' => 'kconv.rb',
  'ext/digest/lib/md5.rb' => 'md5.rb',
  'ext/digest/lib/sha1.rb' => 'sha1.rb',
  'ext/Win32API/lib/win32' => 'win32'
}

# yaml files go into src/builtin for jruby
YAML_FILES = %w[
  yaml.rb
  yaml
]

if ARGV.size < 2
  puts "usage: copy_stdlib <jruby ruby fork clone> <jruby dir>"
  exit 1
elsif !File.exist?(ARGV[0]) || !File.directory?(ARGV[0])
  puts "invalid source dir: #{ARGV[0]}"
  exit 1
elsif !File.exist?(ARGV[1]) || !File.directory?(ARGV[1])
  puts "invalid target dir: #{ARGV[1]}"
  exit 1
end

FORK_DIR = ARGV[0]
JRUBY_DIR = ARGV[1]

for file in STDLIB_FILES
  FileUtils.cp_r "#{FORK_DIR}/lib/#{file}", "#{JRUBY_DIR}/lib/ruby/1.8", :verbose => true
end

for file, target in EXT_FILES
  if File.directory? file
  	FileUtils.cp_r "#{FORK_DIR}/#{file}", "#{JRUBY_DIR}/lib/ruby/1.8/", :verbose => true
  else
  	FileUtils.cp_r "#{FORK_DIR}/#{file}", "#{JRUBY_DIR}/lib/ruby/1.8/#{target}", :verbose => true
  end
end

for file in YAML_FILES
  FileUtils.cp_r "#{FORK_DIR}/lib/#{file}", "#{JRUBY_DIR}/src/builtin", :verbose => true
end